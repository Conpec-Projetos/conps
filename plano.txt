candidato {
    _id: UUID
    email: str[128]

    nome: str[512]
    cel: int
    curso: str[2]
    ano_de_ingresso: int

    mkt {
        principal_meio: str[128]
        exp_conpec: str[16]
        comentario_divulg: str[2048]
        acompanhar_redes: int
    }

    disp [
        { data: YYYY-MM-DD, hora: HH:MM }
    ]

    disp_comentario: str[2048]

    dei {
        idade: int
        estado_origem: str[2]
        genero: str[16]
        lgbt: boolean
        raca_etnia: str[16]
    }

    acessibilidade {
        quer_recurso: boolean
        descricao: str[2048]
    }
}

conpecker {
    _id: UUID
    email: str[128]

    nome: str[512]

    disp [
        { data: YYYY-MM-DD, hora: HH:MM }
    ]

    disp_comentario: str[2048]
}

slot {
    _id: UUID
    data: YYYY-MM-DD
    hora: HH:MM

    candidatos [
        { candidato: candidato, nome: str[128] }
    ]
    conpeckers [
        { conpecker: conpecker, nome: str[128]}
    ]
}

4. Add data to Firestore:

Create documents: Use the Firebase SDK to create new documents within your collections. You'll provide the data for each document as a JSON object.

Update documents: You can modify existing documents by updating their data.

5. Read data from Firestore:

Retrieve documents: Use the Firebase SDK to fetch documents from your collections. You can retrieve individual documents or query for multiple documents based on specific criteria.

6. Learn about Firestore features:

Real-time updates: Firestore automatically updates your app in real-time whenever data changes in your database. This is a powerful feature for building collaborative or live-updating applications.

Offline capabilities: Firestore allows your app to work offline. Data changes made while offline are automatically synced to the database when your app reconnects.

Security rules: Firestore provides a flexible security system that allows you to control who can access and modify your data.